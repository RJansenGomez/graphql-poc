type Query {
    actors(name: String, salaryRange: SalaryRange, nationality: Nationality): [Actor]
    pet(name: String, type:PetType): [Pet]
    showsExtended(titleFilter: String,actorName:String):[Show]
}

type Mutation {
    operateShow(show:InputShow):Show
    operateActor(actor:MutActor):Actor
}

input InputShow {
    id: ID!
    title: String
    releaseYear: Int
    actors: [InputActor]
}

input InputActor {
    name: ID!
}
input InputPet{
    name: ID!
    type: PetType
    owner: InputActor
}

input MutActor{
    name: ID!
    nationality: Nationality
    salary: Float
    shows: [InputShow]
    pet:[InputPet]
}

type Show {
    id: ID!
    title: String
    releaseYear: Int
    actors: [Actor]
}

type Actor {
    name: ID!
    nationality: Nationality
    salary: Float
    shows: [Show]
    pet:[Pet]
}

type Pet {
    name: String
    type: PetType
    owner: Actor
}

enum PetType {
    DOG
    CAT
    FISH
    CROCODILE
    KOALA
}
input SalaryRange {
    start: Float
    end: Float
}

enum Nationality {
    ES
    FR
    GB
    NL
    IT
}